<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA_Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404</title>
    <link rel="stylesheet" href="../style/mainstyle.css">
<style>
    .fullwidthcontainer{
        padding-top: 5em;
        height: 70dvh;
    }

    .title {
    line-height: 1;
    color: #ded2b4;
    font-family: serif;
    font-size: 300%;
    font-weight: 500;
    font-stretch: 50%;
    text-align: center;
    }

    .maintext{
font-family:system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
color: #97b2cf;
font-size: 140%;

}

    .maintext uem{
  color: #bcbcaec8;
  /* text-decoration: none; */
}
.maintext a{
  width: 150px;
  height: 100px;
  text-decoration: underline;
  color: #ded2b4;
}

#open-web-calendar{


border-radius: 15px;


}
    
</style>
</head>
<body onload = "makeApiRequest()" >
    
    <div class="background">
        <div class="topnav">
            <a href="/" >Tongtong.inc</a>
        </div>

        <div class="textcontainer" style="min-height: 70dvh;">
          <div class="heading title" style="margin-top: 2em;">
            404
            <div id="response-container"></div>
        </div>
         


       

        </div>
            

        <a href="/" class="hstack">
            
            <div class="conic backbutton" >

                <svg viewbox="0 0 1000 1000" class="squircle">
                  <path d="M0 450C0 300 50 250 200 250L800 250C950 250 1000 304.78 1000 450L1000 550C1000 700 950 750 800 750L200 750C50 750 0 700 0 550L0 450Z" fill="var(--bg)"></path>
                </svg>
                Back
              </div>
            </a>

        

    </div>
    <div class="dropoff">

            
    </div>
    
    <script>
        async function makeApiRequest() {
            // Get user input
            var payload = {
                "messages": [{
                    "content": 'You are a error 404 generator',
                    "role": 'system'
                },{
                    "content": 'Write an creative 404 error code that is no longer than 50 words',
                    "role": 'user'
                    
                }],
                             
                 "stream": "true"
            }
            

            
            // Make a POST request to the API
            const response = await fetch('https://api.tongtonginc.com/ai/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });
            
            const reader = response.body?.pipeThrough(new TextDecoderStream()).getReader();
            if (!reader) return;
            // eslint-disable-next-line no-constant-condition
            let urChat = "";

            let accumulatedData = ''; // Variable to accumulate lines until a complete JSON object is formed
            while (true) {
                const { value, done } = await reader.read();
                if (done) break;
                let dataDone = false;
                const arr = value.split('\n');
                arr.forEach((data, index) => {
                    if (data.length === 0) return; // ignore empty message
                    if (data.startsWith(':')) return; // ignore SSE comment message
                    if (data === 'data: [DONE]') {
                        dataDone = true;
                        return;
                    }
                    
                    
                    // delete data part of response so parse json wont gicve stupid error
                    if (data.startsWith('data: ')) {
                        data = data.slice('data: '.length);
                    }

                    // Concatenate consecutive lines to accumulate complete JSON
                    accumulatedData += data;

                    // Check if the accumulated data is a complete JSON object
                    try {
                        const jsonData = JSON.parse(accumulatedData);
                        const content = jsonData.choices[0].delta.content;
                        
                        
                        if (content !== undefined) {
                            console.log(content);
                            urChat += content;
                            console.log(urChat);
                            displayResponse(urChat);
                            
                            
                        }
                        accumulatedData = '';
                    } catch (error) {
                        // Do nothing, continue accumulating data until a complete JSON object is formed
                    }
                });
                if (dataDone) break;
            }
        }
        
        
        function displayResponse(data) {
            // Display the API response in the response-container div
            var responseContainer = document.getElementById("response-container");
            
            responseContainer.innerHTML = data;
        }

    </script>
    
</body>

</html>
